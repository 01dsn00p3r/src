#<pycode(py_nalt)>
import _ida_idaapi

SWI_SPARSE      = 0x1
"""sparse switch ( value table present ) otherwise lowcase present"""

SWI_V32         = 0x2
"""32-bit values in table"""

SWI_J32         = 0x4
"""32-bit jump offsets"""

SWI_VSPLIT      = 0x8
"""value table is split (only for 32-bit values)"""

SWI_DEFAULT     = 0x10
"""default case is present"""

SWI_DEF_IN_TBL  = 0x20
"""default case is an entry in the jump table.
This flag is only applicable in the case of a sparse
nonindirect switch (i.e. a switch with a values table).
<jump table size> == <value table size> + 1.
The default case entry is the last one in the table
(or the first one in the case of an inversed jump table)."""

SWI_JMP_INV     = 0x40
"""jumptable is inversed (last entry is for first entry in values table)"""

SWI_SHIFT_MASK  = 0x180
"""use formula (element*shift + elbase) to find jump targets"""

SWI_ELBASE      = 0x200
"""elbase is present (if not and shift!=0, endof(jumpea) is used)"""

SWI_JSIZE       = 0x400
"""jump offset expansion bit"""

SWI_VSIZE       = 0x800
"""value table element size expansion bit"""

SWI_SEPARATE    = 0x1000
"""do not create an array of individual dwords"""

SWI_SIGNED      = 0x2000
"""jump table entries are signed"""

SWI_CUSTOM      = 0x4000
"""custom jump table.
\ph{create_switch_xrefs} will be called to create code xrefs for the
table. Custom jump table must be created by the module
(see also #SWI_STDTBL)"""

SWI_INDIRECT    = 0x00010000
"""value table elements are used as indexes into the jump table"""

SWI_SUBTRACT    = 0x00020000
"""table values are subtracted from the elbase instead of being addded"""

SWI_HXNOLOWCASE = 0x00040000
"""lowcase value should not be used by the decompiler (internal flag)"""

SWI_STDTBL      = 0x00080000
"""custom jump table with standard table formatting.
ATM IDA doesn't use SWI_CUSTOM for switches with standard
table formatting. So this flag can be considered as obsolete."""

SWI_DEFRET      = 0x00100000
"""return in the default case (defjump==BADADDR)"""

# --------------------------------------------------------------------------
class switch_info_t(ida_idaapi.py_clinked_object_t):
    def __init__(self, lnk = None):
        ida_idaapi.py_clinked_object_t.__init__(self, lnk)
        self.bc695_api = False

    def _create_clink(self):
        return _ida_nalt.switch_info_t_create()

    def _del_clink(self, lnk):
        return _ida_nalt.switch_info_t_destroy(lnk)

    def assign(self, other):
        return _ida_nalt.switch_info_t_assign(self, other)

    def is_indirect(self):
        return (self.flags & SWI_INDIRECT) != 0

    def is_subtract(self):
        return (self.flags & SWI_SUBTRACT) != 0

    def get_jtable_size(self):
        return self.jcases if self.is_indirect() else self.ncases

    def get_lowcase(self):
        return self.ind_lowcase if self.is_indirect() else self.lowcase

    def set_expr(self, r, dt):
        self.regnum = r
        self.regdtype = dt

    def get_shift(self):
        return (self.flags & SWI_SHIFT_MASK) >> 7

    def set_shift(self, shift):
        self.flags &= ~SWI_SHIFT_MASK
        self.flags |= ((shift & 3) << 7)

    def get_jtable_element_size(self):
        code = self.flags & (SWI_J32|SWI_JSIZE)
        if   code == 0:         return 2
        elif code == SWI_J32:   return 4
        elif code == SWI_JSIZE: return 1
        else:                   return 8

    def set_jtable_element_size(self, size):
        self.flags &= ~(SWI_J32|SWI_JSIZE)
        if size == 4:   self.flags |= SWI_J32
        elif size == 1: self.flags |= SWI_JSIZE
        elif size == 8: self.flags |= SWI_J32|SWI_JSIZE
        elif size != 2: return False
        return True

    def get_vtable_element_size(self):
        code = self.flags & (SWI_V32|SWI_VSIZE)
        if   code == 0:         return 2
        elif code == SWI_V32:   return 4
        elif code == SWI_VSIZE: return 1
        return 8

    def set_vtable_element_size(self, size):
        self.flags &= ~SWI_V32|SWI_VSIZE
        if size == 4:   self.flags |= SWI_V32
        elif size == 1: self.flags |= SWI_VSIZE
        elif size == 8: self.flags |= SWI_V32|SWI_VSIZE
        elif size != 2: return False
        return True

    #
    # Autogenerated
    #
    def __get_regdtype__(self):
        return _ida_nalt.switch_info_t_get_regdtype(self)
    def __set_regdtype__(self, v):
        _ida_nalt.switch_info_t_set_regdtype(self, v)
    def __get_jcases__(self):
        return _ida_nalt.switch_info_t_get_jcases(self)
    def __set_jcases__(self, v):
        _ida_nalt.switch_info_t_set_jcases(self, v)
    def __get_regnum__(self):
        return _ida_nalt.switch_info_t_get_regnum(self)
    def __set_regnum__(self, v):
        _ida_nalt.switch_info_t_set_regnum(self, v)
    def __get_flags__(self):
        return _ida_nalt.switch_info_t_get_flags(self)
    def __set_flags__(self, v):
        _ida_nalt.switch_info_t_set_flags(self, v)
    def __get_ncases__(self):
        return _ida_nalt.switch_info_t_get_ncases(self)
    def __set_ncases__(self, v):
        _ida_nalt.switch_info_t_set_ncases(self, v)
    def __get_defjump__(self):
        return _ida_nalt.switch_info_t_get_defjump(self)
    def __set_defjump__(self, v):
        _ida_nalt.switch_info_t_set_defjump(self, v)
    def __get_jumps__(self):
        return _ida_nalt.switch_info_t_get_jumps(self)
    def __set_jumps__(self, v):
        _ida_nalt.switch_info_t_set_jumps(self, v)
    def __get_elbase__(self):
        return _ida_nalt.switch_info_t_get_elbase(self)
    def __set_elbase__(self, v):
        _ida_nalt.switch_info_t_set_elbase(self, v)
    def __get_startea__(self):
        return _ida_nalt.switch_info_t_get_startea(self)
    def __set_startea__(self, v):
        _ida_nalt.switch_info_t_set_startea(self, v)
    def __get_custom__(self):
        return _ida_nalt.switch_info_t_get_custom(self)
    def __set_custom__(self, v):
        _ida_nalt.switch_info_t_set_custom(self, v)
    def __get_ind_lowcase__(self):
        return _ida_nalt.switch_info_t_get_ind_lowcase(self)
    def __set_ind_lowcase__(self, v):
        _ida_nalt.switch_info_t_set_ind_lowcase(self, v)
    def __get_values_lowcase__(self):
        return _ida_nalt.switch_info_t_get_values_lowcase(self)
    def __set_values_lowcase__(self, v):
        _ida_nalt.switch_info_t_set_values_lowcase(self, v)
    regdtype = property(__get_regdtype__, __set_regdtype__)
    """size of the switch expression register as dtype"""
    jcases = property(__get_jcases__, __set_jcases__)
    """number of entries in the jump table (SWI_INDIRECT)"""
    regnum = property(__get_regnum__, __set_regnum__)
    """the switch expression as a register number"""
    flags = property(__get_flags__, __set_flags__)
    """switch info flags"""
    ncases = property(__get_ncases__, __set_ncases__)
    """number of cases (excluding default)"""
    defjump = property(__get_defjump__, __set_defjump__)
    """default jump address"""
    jumps = property(__get_jumps__, __set_jumps__)
    """jump table address"""
    elbase = property(__get_elbase__, __set_elbase__)
    """element base"""
    startea = property(__get_startea__, __set_startea__)
    """start of switch idiom"""
    custom = property(__get_custom__, __set_custom__)
    """information for custom tables (filled and used by modules)"""
    ind_lowcase = property(__get_ind_lowcase__, __set_ind_lowcase__)
    values = property(__get_values_lowcase__, __set_values_lowcase__)
    lowcase = property(__get_values_lowcase__, __set_values_lowcase__)

#</pycode(py_nalt)>

#<pycode_BC695(py_nalt)>
ASCSTR_LAST=7
ASCSTR_LEN2=STRTYPE_LEN2
ASCSTR_LEN4=STRTYPE_LEN4
ASCSTR_PASCAL=STRTYPE_PASCAL
ASCSTR_TERMCHR=STRTYPE_TERMCHR
ASCSTR_ULEN2=STRTYPE_LEN2_16
ASCSTR_ULEN4=STRTYPE_LEN4_16
ASCSTR_UNICODE=STRTYPE_C_16
ASCSTR_UTF16=STRTYPE_C_16
ASCSTR_UTF32=STRTYPE_C_32
REF_VHIGH=V695_REF_VHIGH
REF_VLOW=V695_REF_VLOW
SWI_END_IN_TBL=SWI_DEF_IN_TBL
SWI_EXTENDED=0x8000
SWI2_INDIRECT=SWI_INDIRECT >> 16
SWI2_SUBTRACT=SWI_SUBTRACT >> 16
import ida_netnode
RIDX_AUTO_PLUGINS=ida_netnode.BADNODE
change_encoding_name=rename_encoding
@bc695redef
def del_tinfo2(ea, n=None):
    if n is not None:
        return del_op_tinfo(ea, n)
    else:
        return del_tinfo(ea)
get_encodings_count=get_encoding_qty
def get_op_tinfo(*args):
    import ida_typeinf
    if isinstance(args[2], ida_typeinf.tinfo_t): # 6.95: ea, n, tinfo_t
        ea, n, tif = args
    else:                                        # 7.00: tinfo_t, ea, n
        tif, ea, n = args
    return _ida_nalt.get_op_tinfo(tif, ea, n)
get_op_tinfo2=get_op_tinfo
@bc695redef
def is_unicode(strtype):
    return (strtype & STRWIDTH_MASK) > 0
set_op_tinfo2=set_op_tinfo
set_tinfo2=set_tinfo
switch_info_t.regdtyp = switch_info_t.regdtype
def get_tinfo(*args):
    import ida_typeinf
    if isinstance(args[1], ida_typeinf.tinfo_t): # 6.95: ea, tinfo_t
        ea, tif = args
    else:                                        # 7.00: tinfo_t, ea
        tif, ea = args
    return _ida_nalt.get_tinfo(tif, ea)
get_tinfo2=get_tinfo
def get_refinfo(*args):
    if isinstance(args[2], refinfo_t): # 6.95: ea, n, refinfo_t
        ea, n, ri = args
    else:                              # 7.00: refinfo_t, ea, n
        ri, ea, n = args
    return _ida_nalt.get_refinfo(ri, ea, n)

get_switch_info_ex=get_switch_info
set_switch_info_ex=set_switch_info
del_switch_info_ex=del_switch_info
switch_info_ex_t_assign=switch_info_t_assign
switch_info_ex_t_create=switch_info_t_create
switch_info_ex_t_destroy=switch_info_t_destroy
switch_info_ex_t_get_custom=switch_info_t_get_custom
switch_info_ex_t_get_defjump=switch_info_t_get_defjump
switch_info_ex_t_get_elbase=switch_info_t_get_elbase
switch_info_ex_t_get_flags=switch_info_t_get_flags
switch_info_ex_t_get_ind_lowcase=switch_info_t_get_ind_lowcase
switch_info_ex_t_get_jcases=switch_info_t_get_jcases
switch_info_ex_t_get_jumps=switch_info_t_get_jumps
switch_info_ex_t_get_ncases=switch_info_t_get_ncases
switch_info_ex_t_get_regdtyp=switch_info_t_get_regdtype
switch_info_ex_t_get_regnum=switch_info_t_get_regnum
switch_info_ex_t_get_startea=switch_info_t_get_startea
switch_info_ex_t_get_values_lowcase=switch_info_t_get_values_lowcase
switch_info_ex_t_set_custom=switch_info_t_set_custom
switch_info_ex_t_set_defjump=switch_info_t_set_defjump
switch_info_ex_t_set_elbase=switch_info_t_set_elbase
switch_info_ex_t_set_flags=switch_info_t_set_flags
switch_info_ex_t_set_ind_lowcase=switch_info_t_set_ind_lowcase
switch_info_ex_t_set_jcases=switch_info_t_set_jcases
switch_info_ex_t_set_jumps=switch_info_t_set_jumps
switch_info_ex_t_set_ncases=switch_info_t_set_ncases
switch_info_ex_t_set_regdtyp=switch_info_t_set_regdtype
switch_info_ex_t_set_regnum=switch_info_t_set_regnum
switch_info_ex_t_set_startea=switch_info_t_set_startea
switch_info_ex_t_set_values_lowcase=switch_info_t_set_values_lowcase

def __switch_info_t_get_flags__(instance):
    return switch_info_t.__get_flags__(instance) | SWI_EXTENDED
def __switch_info_t_set_flags__(instance, v):
    if instance.bc695_api:
        v |= (switch_info_t.__get_flags__(instance) & 0xFFFF0000)
    switch_info_t.__set_flags__(instance, v)
switch_info_t.flags = property(__switch_info_t_get_flags__, __switch_info_t_set_flags__)

def __switch_info_t_get_flags2__(instance):
    instance.bc695_api = True
    return switch_info_t.__get_flags__(instance) >> 16
def __switch_info_t_set_flags2__(instance, v):
    instance.bc695_api = True
    flags = switch_info_t.__get_flags__(instance)
    instance.flags = (flags & 0xFFFF) | (v << 16)
switch_info_t.flags2 = property(__switch_info_t_get_flags2__, __switch_info_t_set_flags2__)

switch_info_ex_t=switch_info_t
#</pycode_BC695(py_nalt)>
